{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to python lessons","text":"<p>This project is a collection of lessons for learning python. Divided into three levels, beginner, intermediate and advanced, the lessons are designed to be self contained and can be used as a reference for learning python.</p> <p>Use of mkdocs to generate documentation. With mkdocs, it is possible to generate a static website with the documentation, and also to include python code with the use of docstrings.</p> <ul> <li>mkdocs: Project documentation with Markdown.</li> <li>mkdocstrings-python: Python   docstrings support for MkDocs.</li> <li>python docstring example:   Example of docstring using google style.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>.vscode/                    # vscode settings\n\ncspell/                     # cspell configuration and custom dictionaries\n\ndocs/                       # markdown files for the mkdocs documentation\n  adr/                      # architecture decision records\n  advanced/                 # advance lessons\n  assets/                   # stylesheets and other assets\n  beginner/                 # beginner lessons\n  intermediate/             # intermediate lessons\n  index.md                  # documentation homepage\n  template.md               # template for the lessons\n\nsrc/                        # python code for advanced, beginner and intermediate lessons\n  advanced/\n  beginner/\n  intermediate/\n\ntests/                      # tests for advanced, beginner and intermediate lessons\n  advanced/\n  beginner/\n  intermediate/\n\n.gitignore                  # gitignore file\n.markdownlint.json          # markdownlint configuration\n.pre-commit-config.yaml     # pre-commit configuration\nCODEOWNERS                  # codeowners file for github\nCONTRIBUTING.md             # contributing guidelines\nMakefile                    # commands to easy use the project\nmkdocs.yml                  # mkdocs configuration\npoetry.lock                 # poetry lock file\npyproject.toml              # python project configuration\nREADME.md                   # README of the project\n</code></pre>"},{"location":"template/","title":"Name of the lesson","text":"<p>Description of the python lesson.</p> <p>Copy/paste below piece of code, and replace with values to embed the wanted docstring and python module inside the documentation.</p> <pre><code>::: src.&lt;level&gt;.&lt;module&gt;\n    options:\n      members:\n        - &lt;method&gt;\n        - &lt;class&gt;\n        - &lt;attribute&gt;\n        - ...\n</code></pre>"},{"location":"adr/001-poetry/","title":"ADR-001 - poetry installation","text":"Creation Date Status Author 04/10/2023 Accepted @mclargo"},{"location":"adr/001-poetry/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>This project is mean to be a collaborative project, and it is important to have a properly configured environment, so everyone can run the project without any issues or inconsistencies.</p>"},{"location":"adr/001-poetry/#solution","title":"Solution","text":"<p>In order to have a clean environment for this project, and to avoid issues with different versions of libraries and other dependencies, I am going to use poetry.</p> <p>Poetry helps to keep dependencies in one place, in a separated virtual environment. As it uses pyproject.toml to keep the versions of the libraries, it is easy to install and keep track of the dependencies.</p>"},{"location":"adr/001-poetry/#other-solutions-considered","title":"Other Solutions Considered","text":"<p>None</p>"},{"location":"adr/002-mkdocs/","title":"ADR-002 - mkdocs","text":"Creation Date Status Author 04/10/2023 Accepted @mclargo"},{"location":"adr/002-mkdocs/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Goal is to create a live documentation for the python lessons, and also to include python code, visible in the documentation automatically if there are any changes. Also, all python code should be tested (tests not included in the documentation at the moment).</p>"},{"location":"adr/002-mkdocs/#solution","title":"Solution","text":"<p>mkdocs provides a good solution for the problem. It is possible to generate a documentation website with markdown files (lightweight markup language for creating formatted text using a plain-text and simple format) and also to include python code with the use of docstrings (mkdocstrings-python library).</p> <p>Additionally, we are adding mkdocs-material library. Not only provides a nice theme. It also provides a lot of features and customization, like search, footer and header customization, icons, annotation and more. Feel free to check the documentation and see all the features, adding those to the documentation if needed.</p>"},{"location":"adr/002-mkdocs/#other-solutions-considered","title":"Other Solutions Considered","text":"<ul> <li>pydocs: python documentation generator. It is a good tool, but it is not   possible to include python code in the documentation.</li> <li>Jupyter Notebook: it is possible to include python code in the documentation,   and execute live, but it is not possible to generate a static website with the   documentation. Also, requires a lot of dependencies to be installed.</li> </ul>"},{"location":"adr/003-spelling/","title":"ADR-003 - Spelling check","text":"Creation Date Status Author 20/02/2024 Accepted @mclargo"},{"location":"adr/003-spelling/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Python lessons is a project that contains python code, but mainly documentation. Either in the format of docstrings attached to the code, or in markdown files.</p> <p>Main language for the documentation is English, but it is not the native language of the authors. It is important to have a tool that checks the spelling of the documentation, to avoid typos and grammar mistakes.</p>"},{"location":"adr/003-spelling/#solution","title":"Solution","text":"<p>cSpell is a good tool to check the spelling of files. There are some features offered by cSpell out-of-the-box that makes the difference:</p> <ul> <li>Supports more than one language. It is possible to check the spelling of   different languages in the same file.</li> <li>Supports different file formats, including markdown and python files.</li> <li>Supports   pre-commit,   which is already working in the project, so it is easy to add new rule.</li> <li>It is possible to define your own dictionary, and define custom words.</li> <li>Compatible with VSCode, which is the main IDE used by the authors.</li> <li>Highly configurable.</li> </ul>"},{"location":"adr/003-spelling/#other-solutions-considered","title":"Other Solutions Considered","text":"<ul> <li>yaspeller: it is a good tool, but it   does not support multiple languages in the same file and not compatible with   VSCode.</li> <li>codespell: much older than   cSpell, and not as feature-rich. Documentation hard to follow.</li> </ul>"},{"location":"adr/004-deployment/","title":"ADR-004 - CI/CD Deployment","text":"Creation Date Status Author 23/02/2024 Accepted @mclargo"},{"location":"adr/004-deployment/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Python lessons is a project build not only for the code owners, but also for the community. These lessons can serve as reference, and inspire others. Who knows, maybe someone will want to contribute to the project in the future.</p> <p>We want to public our documentation in a production environment. This process should be automated, once the documentation is merged to the main branch in the repository. to automate the process of deploying the code to the production environment.</p>"},{"location":"adr/004-deployment/#solution","title":"Solution","text":"<p>As we are using github to store our repository, the simplest solution is to use GitHub Actions to automate the process of deploying the documentation to github pages.</p> <p>material provides the corresponding github action to deploy the documentation to github pages. To automate the process, we just need create a new workflow file in the <code>.github/workflows</code>. Once the documentation is merged to the main branch, the documentation should be available in the production environment shortly.</p> <p>Locally, you can use <code>make deploy</code> to manually deploy the documentation to github pages.</p>"},{"location":"adr/004-deployment/#other-solutions-considered","title":"Other Solutions Considered","text":"<p>None</p>"},{"location":"advanced/decorators/","title":"Decorators","text":"<p>A decorator is a design pattern in Python that allows to add new functionality to an existing object or function without modifying its structure.</p> <p>Very useful when the same functionality is required in different places, as it is very simple to reuse without having to copy and paste the code. Very easy to maintain.</p>"},{"location":"advanced/decorators/#measure-decorator","title":"Measure decorator","text":"<p>The measure decorator is a very simple example of a decorator. It allows to measure the time it takes to execute a function.</p>"},{"location":"advanced/decorators/#src.advanced.decorators.measure","title":"<code>src.advanced.decorators.measure</code>","text":"<p>Measure decorator.</p> <p>This method is a decorator that measures the execution time of a function.</p>"},{"location":"advanced/decorators/#src.advanced.decorators.measure.measure","title":"<code>src.advanced.decorators.measure.measure(func)</code>","text":"<p>Measure decorator.</p> <p>This method is a decorator that measures the execution time in seconds of a function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>Function to decorate</p> required <p>Returns:</p> Type Description <code>func</code> <p>Decorated function</p> Source code in <code>src/advanced/decorators/measure.py</code> <pre><code>def measure(func: Callable):\n    \"\"\"Measure decorator.\n\n    This method is a decorator that measures the execution time in seconds\n    of a function.\n\n    Args:\n        func (Callable): Function to decorate\n\n    Returns:\n        (func): Decorated function\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        start = time()\n        func(*args, **kwargs)\n        elapsed_sec = time() - start\n        elapsed_format = f\"{elapsed_sec:.3f}\"\n        logger.debug(\n            \"Method %s executed in %s seconds\",\n            func.__name__,\n            elapsed_format,\n        )\n\n    return wrapper\n</code></pre>"},{"location":"advanced/decorators/#retry-decorator","title":"Retry decorator","text":"<p>The retry decorator is a more complex example of a decorator. It allows to retry a function a number of times if it fails.</p>"},{"location":"advanced/decorators/#src.advanced.decorators.retry","title":"<code>src.advanced.decorators.retry</code>","text":"<p>Retry decorator.</p> <p>This method is a decorator that retries a function call a number of times, with a exponential delay between retries.</p>"},{"location":"advanced/decorators/#src.advanced.decorators.retry.retry","title":"<code>src.advanced.decorators.retry.retry(attempts=3, delay=1.0)</code>","text":"<p>Retry decorator.</p> <p>This method is a decorator that retries a function call a number of times, with a exponential delay between retries. If max attempts is reached, the exception is raised by the function, not captured in logs.</p> <p>Parameters:</p> Name Type Description Default <code>attempts</code> <code>int</code> <p>Number of times to retry the operation.</p> <code>3</code> <code>delay</code> <code>float</code> <p>Delay between retries, in seconds.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>func</code> <p>Decorated function</p> Source code in <code>src/advanced/decorators/retry.py</code> <pre><code>def retry(attempts: int = 3, delay: float = 1.0):\n    \"\"\"Retry decorator.\n\n    This method is a decorator that retries a function call a number of times,\n    with a exponential delay between retries.\n    If max attempts is reached, the exception is raised by the function,\n    not captured in logs.\n\n    Args:\n        attempts (int): Number of times to retry the operation.\n        delay (float): Delay between retries, in seconds.\n\n    Returns:\n        (func): Decorated function\n    \"\"\"\n\n    def decorator(func: Callable):\n        def wrapper(*args, **kwargs):\n            exception = None\n            for current_attempt in range(1, attempts + 1):\n                try:\n                    logger.debug(\"Attempt %s\", current_attempt)\n                    return func(*args, **kwargs)\n                except Exception as exc:\n                    if current_attempt &lt; attempts:\n                        logger.warning(\"Exception, retrying\")\n                        sleep((1 + delay) ** current_attempt)\n                    else:\n                        exception = exc\n            logger.error(\"Raising exception, max attempts reached\")\n            raise exception\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"advanced/decorators/#singleton-decorator","title":"Singleton decorator","text":"<p>The singleton decorator is a very useful example of a decorator. It allows to ensures that only exists one instance of a class.</p>"},{"location":"advanced/decorators/#src.advanced.decorators.singleton","title":"<code>src.advanced.decorators.singleton</code>","text":"<p>Singleton decorator.</p> <p>This method is a decorator to ensures that only exists one instance of a class.</p>"},{"location":"advanced/decorators/#src.advanced.decorators.singleton.singleton","title":"<code>src.advanced.decorators.singleton.singleton(cls)</code>","text":"<p>Singleton decorator.</p> <p>Method to decorate a class as a singleton. This decorator ensures that exists only one instance of a class.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type</code> <p>Class to decorate</p> required <p>Returns:</p> Type Description <code>type</code> <p>Instance of the decorated class</p> Source code in <code>src/advanced/decorators/singleton.py</code> <pre><code>def singleton(cls: type):\n    \"\"\"Singleton decorator.\n\n    Method to decorate a class as a singleton. This decorator ensures that\n    exists only one instance of a class.\n\n    Args:\n        cls (type): Class to decorate\n\n    Returns:\n        (type): Instance of the decorated class\n    \"\"\"\n\n    def __new__singleton(cls: type, *args, **kwargs):  # noqa: ARG001\n        if not hasattr(cls, \"__singleton\"):\n            cls.__singleton = object.__new__(cls)\n        return cls.__singleton\n\n    cls.__new__ = __new__singleton\n    return cls\n</code></pre>"},{"location":"advanced/lambda_functions/","title":"Lambda functions","text":"<p>Lambda expressions are ideally used when we need to do something simple and are more interested in getting the job done quickly rather than formally naming the function.</p> <p>Lambda expressions are also known as anonymous functions.</p> <p>Lambda functions behave like normal functions declared with the def keyword. They are useful when you want to define a small function concisely. They must contain only one expression, so they are not best suited for functions with control flow statements.</p>"},{"location":"advanced/lambda_functions/#misused","title":"Misused","text":"<p>Lambda functions help to write is just one line, code that would require a bunch of lines. It can make the code less readable. They are very useful, but overuse can make the code difficult to understand.</p>"},{"location":"advanced/lambda_functions/#use-with-functions-like-map-max-etc","title":"Use with functions like map(), max(), etc","text":"<p>Functions like map() can be used with lambda functions. In that case, map() will the lambda function to every element of a given iterable (list, tuple, etc.).</p> <p>For example:</p>"},{"location":"advanced/lambda_functions/#src.advanced.lambda_functions.get_list_of_fields_from_a_list_dict","title":"<code>src.advanced.lambda_functions.get_list_of_fields_from_a_list_dict(content, field_to_be_extracted)</code>","text":"<p>Extract and return a given field from a list of dictionaries.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>list[dict[str, str]]</code> <p>list of dictionaries.</p> required <code>field_to_be_extracted</code> <code>str</code> <p>field to be extracted.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of the values extracted.</p> Source code in <code>src/advanced/lambda_functions/lambda_functions.py</code> <pre><code>def get_list_of_fields_from_a_list_dict(\n    content: list[dict[str, str]],\n    field_to_be_extracted: str,\n) -&gt; list[str]:\n    \"\"\"Extract and return a given field from a list of dictionaries.\n\n    Parameters:\n        content: list of dictionaries.\n        field_to_be_extracted: field to be extracted.\n\n    Returns:\n        list[str]: list of the values extracted.\n    \"\"\"\n    return map(lambda d: d[field_to_be_extracted], content)\n</code></pre>"},{"location":"advanced/lambda_functions/#apply-lambda-functions-for-sorting-data","title":"Apply lambda functions for sorting data","text":"<p>Lambda functions can be used for sorting dada in list, dict, etc.</p>"},{"location":"advanced/lambda_functions/#src.advanced.lambda_functions.sort_a_list_of_dict_by_a_field","title":"<code>src.advanced.lambda_functions.sort_a_list_of_dict_by_a_field(content_to_be_sorted, sorted_by, asc=True)</code>","text":"<p>Sort a list of dict by a given field.</p> <p>Parameters:</p> Name Type Description Default <code>content_to_be_sorted</code> <code>list[dict]</code> <p>list of dict to be sorted.</p> required <code>sorted_by</code> <code>str</code> <p>field to be used for sorting.</p> required <code>asc</code> <code>bool</code> <p>if false, it is sort in descending order. By default, it is true, ascending order.</p> <code>True</code> <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>list[dict[str, str]]: content sorted.</p> Source code in <code>src/advanced/lambda_functions/lambda_functions.py</code> <pre><code>def sort_a_list_of_dict_by_a_field(\n    content_to_be_sorted: list[dict],\n    sorted_by: str,\n    asc: bool = True,\n) -&gt; list[dict[str, str]]:\n    \"\"\"Sort a list of dict by a given field.\n\n    Parameters:\n        content_to_be_sorted: list of dict to be sorted.\n        sorted_by: field to be used for sorting.\n        asc: if false, it is sort in descending order. By default, it is true,\n            ascending order.\n\n    Returns:\n        list[dict[str, str]]: content sorted.\n    \"\"\"\n    return sorted(\n        content_to_be_sorted,\n        key=lambda d: d[sorted_by],\n        reverse=not asc,\n    )\n</code></pre>"},{"location":"advanced/lambda_functions/#pass-a-lambda-function-as-parameter-to-a-function","title":"Pass a lambda function as parameter to a function","text":""},{"location":"advanced/lambda_functions/#src.advanced.lambda_functions.filter_by_applying_function_to_elements","title":"<code>src.advanced.lambda_functions.filter_by_applying_function_to_elements(func, elements)</code>","text":"<p>Apply a function to a list of elements.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to apply.</p> required <code>elements</code> <code>list[Any]</code> <p>elements to apply the function.</p> required <p>Returns:</p> Type Description <code>list[Any]</code> <p>list[Any]: the result of apply a function to a list of elements.</p> Source code in <code>src/advanced/lambda_functions/lambda_functions.py</code> <pre><code>def filter_by_applying_function_to_elements(\n    func: Callable,\n    elements: list[Any],\n) -&gt; list[Any]:\n    \"\"\"Apply a function to a list of elements.\n\n    Parameters:\n        func: function to apply.\n        elements: elements to apply the function.\n\n    Returns:\n        list[Any]: the result of apply a function to a list of elements.\n    \"\"\"\n    return list(filter(func, elements))\n</code></pre>"},{"location":"beginner/check_is_instance/","title":"Check is instance","text":"<p>Python is not a strong-typed language. It is true that it support type hints, but it is not enforced. However, sometimes it is useful to check if a variable is of a certain type.</p>"},{"location":"beginner/check_is_instance/#src.beginner.check_is_instance","title":"<code>src.beginner.check_is_instance</code>","text":"<p>Module to check if an instance is of a given type.</p> <p>This module contains a function to check if an instance is of a given type.</p>"},{"location":"beginner/check_is_instance/#src.beginner.check_is_instance.is_instance","title":"<code>src.beginner.check_is_instance.is_instance(instance, instance_type)</code>","text":"<p>Check if instance is of the type provided.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>object</code> <p>any kind of object.</p> required <code>instance_type</code> <code>class or tuple</code> <p>expected instance type for instance.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>true if instance is the one expected, false otherwise.</p> Source code in <code>src/beginner/check_is_instance/check_is_instance.py</code> <pre><code>def is_instance(instance, instance_type) -&gt; bool:\n    \"\"\"Check if instance is of the type provided.\n\n    Parameters:\n        instance (object): any kind of object.\n        instance_type (class or tuple): expected instance type for instance.\n\n    Returns:\n        bool: true if instance is the one expected, false otherwise.\n    \"\"\"\n    return isinstance(instance, instance_type)\n</code></pre>"},{"location":"beginner/classes_and_objects/","title":"Classes and objects","text":""},{"location":"beginner/classes_and_objects/#class","title":"Class","text":"<p>A class is the common structure for all objects or instances.</p> <p>A class can have different methods and attributes:</p> <ul> <li>Static method: method that is bound to the class and not the object of the   class.</li> <li>Class method: takes cls as the first parameter. It can modify a class state   that would apply across all the instances of the class.</li> <li>Class attributes: Attributes that are common for all instances of the class.   Careful, class attributes are mutable, that means, if value changes, it   affects to all classes and objects. Use mainly for constants/default values   and tracing data across all classes.</li> </ul>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects","title":"<code>src.beginner.classes_and_objects</code>","text":"<p>Module to set an instance of a Pizza with Ingredients.</p> <p>This module contains the enum for all ingredients available to create a Pizza, and the class to create a Pizza instance.</p>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects.Pizza","title":"<code>src.beginner.classes_and_objects.Pizza</code>","text":"<p>Class to represent a Pizza.</p> <p>Attributes:</p> Name Type Description <code>price_per_ingredient</code> <code>float</code> <p>price per ingredient. Defaults to 3.</p> Source code in <code>src/beginner/classes_and_objects/classes_and_objects.py</code> <pre><code>class Pizza:\n    \"\"\"Class to represent a Pizza.\n\n    Attributes:\n        price_per_ingredient (float): price per ingredient. Defaults to 3.\n    \"\"\"\n\n    price_per_ingredient: float = 3\n\n    def __init__(self, ingredients: list[IngredientEnum]) -&gt; None:\n        \"\"\"Constructor for Pizza class.\n\n        Args:\n            ingredients (list[IngredientEnum]): List of ingredients for a Pizza\n        \"\"\"\n        self.ingredients: list[IngredientEnum] = ingredients\n\n    @classmethod\n    def napolitana(cls) -&gt; \"Pizza\":\n        \"\"\"Class Method to create a Napolitana Pizza instance.\n\n        We can create a classmethod, as all napolitana pizzas\n        will have the same ingredients.\n\n        Returns:\n            Pizza: a Pizza instance.\n        \"\"\"\n        ingredients = [\n            IngredientEnum.BASIL,\n            IngredientEnum.TOMATO,\n            IngredientEnum.MOZZARELLA,\n        ]\n        return cls(ingredients=ingredients)\n\n    @classmethod\n    def four_cheese(cls) -&gt; \"Pizza\":\n        \"\"\"Class Method to create a Four cheese Pizza instance.\n\n        We can create a classmethod, as all four cheese pizzas\n        will have the same ingredients.\n\n        Returns:\n            Pizza: a Pizza instance.\n        \"\"\"\n        ingredients = [\n            IngredientEnum.GORGONZOLA,\n            IngredientEnum.MOZZARELLA,\n            IngredientEnum.EMMENTAL,\n            IngredientEnum.PARMESAN,\n        ]\n        return cls(ingredients=ingredients)\n\n    def price(self) -&gt; float:\n        \"\"\"Method to get price for Pizza instance.\n\n        It depends on the number of ingredients a Pizza has,\n        and the price per ingredient.\n\n        Returns:\n            float: total price for a Pizza instance.\n        \"\"\"\n        return len(self.ingredients) * self.price_per_ingredient\n\n    @staticmethod\n    def list_all_ingredients() -&gt; list[IngredientEnum]:\n        \"\"\"Static method to list all ingredients available to create a Pizza.\n\n        It can be a static method, as there is no relation with Pizza instance.\n\n        Returns:\n            list[IngredientEnum]: list of ingredients to create a Pizza.\n        \"\"\"\n        return [ingredient for ingredient in IngredientEnum]\n</code></pre>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects.Pizza.__init__","title":"<code>__init__(ingredients)</code>","text":"<p>Constructor for Pizza class.</p> <p>Parameters:</p> Name Type Description Default <code>ingredients</code> <code>list[IngredientEnum]</code> <p>List of ingredients for a Pizza</p> required Source code in <code>src/beginner/classes_and_objects/classes_and_objects.py</code> <pre><code>def __init__(self, ingredients: list[IngredientEnum]) -&gt; None:\n    \"\"\"Constructor for Pizza class.\n\n    Args:\n        ingredients (list[IngredientEnum]): List of ingredients for a Pizza\n    \"\"\"\n    self.ingredients: list[IngredientEnum] = ingredients\n</code></pre>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects.Pizza.four_cheese","title":"<code>four_cheese()</code>  <code>classmethod</code>","text":"<p>Class Method to create a Four cheese Pizza instance.</p> <p>We can create a classmethod, as all four cheese pizzas will have the same ingredients.</p> <p>Returns:</p> Name Type Description <code>Pizza</code> <code>Pizza</code> <p>a Pizza instance.</p> Source code in <code>src/beginner/classes_and_objects/classes_and_objects.py</code> <pre><code>@classmethod\ndef four_cheese(cls) -&gt; \"Pizza\":\n    \"\"\"Class Method to create a Four cheese Pizza instance.\n\n    We can create a classmethod, as all four cheese pizzas\n    will have the same ingredients.\n\n    Returns:\n        Pizza: a Pizza instance.\n    \"\"\"\n    ingredients = [\n        IngredientEnum.GORGONZOLA,\n        IngredientEnum.MOZZARELLA,\n        IngredientEnum.EMMENTAL,\n        IngredientEnum.PARMESAN,\n    ]\n    return cls(ingredients=ingredients)\n</code></pre>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects.Pizza.list_all_ingredients","title":"<code>list_all_ingredients()</code>  <code>staticmethod</code>","text":"<p>Static method to list all ingredients available to create a Pizza.</p> <p>It can be a static method, as there is no relation with Pizza instance.</p> <p>Returns:</p> Type Description <code>list[IngredientEnum]</code> <p>list[IngredientEnum]: list of ingredients to create a Pizza.</p> Source code in <code>src/beginner/classes_and_objects/classes_and_objects.py</code> <pre><code>@staticmethod\ndef list_all_ingredients() -&gt; list[IngredientEnum]:\n    \"\"\"Static method to list all ingredients available to create a Pizza.\n\n    It can be a static method, as there is no relation with Pizza instance.\n\n    Returns:\n        list[IngredientEnum]: list of ingredients to create a Pizza.\n    \"\"\"\n    return [ingredient for ingredient in IngredientEnum]\n</code></pre>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects.Pizza.napolitana","title":"<code>napolitana()</code>  <code>classmethod</code>","text":"<p>Class Method to create a Napolitana Pizza instance.</p> <p>We can create a classmethod, as all napolitana pizzas will have the same ingredients.</p> <p>Returns:</p> Name Type Description <code>Pizza</code> <code>Pizza</code> <p>a Pizza instance.</p> Source code in <code>src/beginner/classes_and_objects/classes_and_objects.py</code> <pre><code>@classmethod\ndef napolitana(cls) -&gt; \"Pizza\":\n    \"\"\"Class Method to create a Napolitana Pizza instance.\n\n    We can create a classmethod, as all napolitana pizzas\n    will have the same ingredients.\n\n    Returns:\n        Pizza: a Pizza instance.\n    \"\"\"\n    ingredients = [\n        IngredientEnum.BASIL,\n        IngredientEnum.TOMATO,\n        IngredientEnum.MOZZARELLA,\n    ]\n    return cls(ingredients=ingredients)\n</code></pre>"},{"location":"beginner/classes_and_objects/#src.beginner.classes_and_objects.Pizza.price","title":"<code>price()</code>","text":"<p>Method to get price for Pizza instance.</p> <p>It depends on the number of ingredients a Pizza has, and the price per ingredient.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>total price for a Pizza instance.</p> Source code in <code>src/beginner/classes_and_objects/classes_and_objects.py</code> <pre><code>def price(self) -&gt; float:\n    \"\"\"Method to get price for Pizza instance.\n\n    It depends on the number of ingredients a Pizza has,\n    and the price per ingredient.\n\n    Returns:\n        float: total price for a Pizza instance.\n    \"\"\"\n    return len(self.ingredients) * self.price_per_ingredient\n</code></pre>"},{"location":"beginner/classes_and_objects/#object","title":"Object","text":"<p>An object is an instance of a class. It is a concrete entity based on arguments during creation. Two objects of the same class are different, with or without the same values.</p>"},{"location":"beginner/dataclasses/","title":"Dataclasses","text":"<p>Dataclasses are a new feature in Python 3.7. They are a convenient way to create classes which are mainly used to store data. By default, dataclasses provide a repr and init method, so we don't have to write them ourselves.</p>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses","title":"<code>src.beginner.dataclasses</code>","text":"<p>Module to create a dataclass Circle, with properties and methods.</p> <p>This module contains a class to explain dataclass, properties and methods with args and *kwargs.</p>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses.Circle","title":"<code>src.beginner.dataclasses.Circle</code>  <code>dataclass</code>","text":"<p>Circle Class.</p> Source code in <code>src/beginner/dataclasses/dataclasses.py</code> <pre><code>@dataclass\nclass Circle:\n    \"\"\"Circle Class.\"\"\"\n\n    radius: float\n    decimal_precision: int\n\n    @property\n    def diameter(self) -&gt; float:\n        \"\"\"Return the diameter of the circle.\n\n        Returns:\n            Diameter of the circle\n        \"\"\"\n        diameter = 2 * self.radius\n        return round(diameter, self.decimal_precision)\n\n    @property\n    def area(self) -&gt; float:\n        \"\"\"Return the area of the circle.\n\n        Returns:\n            Area of the circle\n        \"\"\"\n        area: float = (self.radius**2) * pi\n        return round(area, self.decimal_precision)\n\n    @property\n    def perimeter(self) -&gt; float:\n        \"\"\"Return the perimeter of the circle.\n\n        Returns:\n            Perimeter of the circle\n        \"\"\"\n        perimeter: float = 2 * self.radius * pi\n        return round(perimeter, self.decimal_precision)\n\n    @classmethod\n    def set_circle_args(cls, *args) -&gt; \"Circle\":\n        \"\"\"Set a Circle instance with positional arguments.\n\n        Other Parameters:\n            r (float): Positional argument to create a Circle class,\n                represents the radius\n            d (int): Positional argument to create a Circle class,\n                represents the decimal precision\n        Returns:\n            A circle instance\n        \"\"\"\n        circle: Circle = cls(*args)\n        return circle\n\n    @classmethod\n    def set_circle_kwargs(cls, **kwargs) -&gt; \"Circle\":\n        \"\"\"Set a Circle instance with keyword arguments.\n\n        Other Parameters:\n            radius (float): Keyword argument to create a Circle class,\n                represents the radius\n            decimal_precision (int): Keyword argument to create a Circle class,\n                represents the decimal precision\n        Returns:\n            A circle instance\n        \"\"\"\n        circle_kwargs: Circle = cls(**kwargs)\n        return circle_kwargs\n</code></pre>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses.Circle.area","title":"<code>area: float</code>  <code>property</code>","text":"<p>Return the area of the circle.</p> <p>Returns:</p> Type Description <code>float</code> <p>Area of the circle</p>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses.Circle.diameter","title":"<code>diameter: float</code>  <code>property</code>","text":"<p>Return the diameter of the circle.</p> <p>Returns:</p> Type Description <code>float</code> <p>Diameter of the circle</p>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses.Circle.perimeter","title":"<code>perimeter: float</code>  <code>property</code>","text":"<p>Return the perimeter of the circle.</p> <p>Returns:</p> Type Description <code>float</code> <p>Perimeter of the circle</p>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses.Circle.set_circle_args","title":"<code>set_circle_args(*args)</code>  <code>classmethod</code>","text":"<p>Set a Circle instance with positional arguments.</p> <p>Other Parameters:</p> Name Type Description <code>r</code> <code>float</code> <p>Positional argument to create a Circle class, represents the radius</p> <code>d</code> <code>int</code> <p>Positional argument to create a Circle class, represents the decimal precision</p> <p>Returns:     A circle instance</p> Source code in <code>src/beginner/dataclasses/dataclasses.py</code> <pre><code>@classmethod\ndef set_circle_args(cls, *args) -&gt; \"Circle\":\n    \"\"\"Set a Circle instance with positional arguments.\n\n    Other Parameters:\n        r (float): Positional argument to create a Circle class,\n            represents the radius\n        d (int): Positional argument to create a Circle class,\n            represents the decimal precision\n    Returns:\n        A circle instance\n    \"\"\"\n    circle: Circle = cls(*args)\n    return circle\n</code></pre>"},{"location":"beginner/dataclasses/#src.beginner.dataclasses.Circle.set_circle_kwargs","title":"<code>set_circle_kwargs(**kwargs)</code>  <code>classmethod</code>","text":"<p>Set a Circle instance with keyword arguments.</p> <p>Other Parameters:</p> Name Type Description <code>radius</code> <code>float</code> <p>Keyword argument to create a Circle class, represents the radius</p> <code>decimal_precision</code> <code>int</code> <p>Keyword argument to create a Circle class, represents the decimal precision</p> <p>Returns:     A circle instance</p> Source code in <code>src/beginner/dataclasses/dataclasses.py</code> <pre><code>@classmethod\ndef set_circle_kwargs(cls, **kwargs) -&gt; \"Circle\":\n    \"\"\"Set a Circle instance with keyword arguments.\n\n    Other Parameters:\n        radius (float): Keyword argument to create a Circle class,\n            represents the radius\n        decimal_precision (int): Keyword argument to create a Circle class,\n            represents the decimal precision\n    Returns:\n        A circle instance\n    \"\"\"\n    circle_kwargs: Circle = cls(**kwargs)\n    return circle_kwargs\n</code></pre>"},{"location":"beginner/dataclasses/#properties","title":"Properties","text":"<p>Dataclasses can have properties, which are computed attributes. They are defined by using the <code>@property</code> decorator. And they can be used like normal attributes, without parentheses.</p>"},{"location":"beginner/dataclasses/#args-and-kwargs","title":"<code>*args</code> and <code>**kwargs</code>","text":"<p>Methods can be called with <code>*args</code> and <code>**kwargs</code>. <code>*args</code> represents a tuple of positional arguments, and <code>**kwargs</code> represents a dict of keyword arguments. This is useful when we want to pass a variable number of arguments to a method, or when we want to capture arguments that we don't know about.</p>"},{"location":"beginner/dataclasses/#references","title":"References","text":"<ul> <li>Dataclasses</li> <li>PEP 557</li> </ul>"},{"location":"beginner/dict_vs_defaultdict/","title":"dict vs defaultdict","text":"<p>Inspect the difference between a <code>dict</code> and a <code>defaultdict</code> in Python.</p>"},{"location":"beginner/dict_vs_defaultdict/#access-dict-by-key-with-square-brackets","title":"Access dict by key with square brackets","text":"<p>The easiest way to access a value inside dictionary is with [key] syntax. But be careful, if the key does not exist, you will get a <code>KeyError</code>.</p>"},{"location":"beginner/dict_vs_defaultdict/#src.beginner.dict_vs_defaultdict.get_value_from_dict_with_square_brackets","title":"<code>src.beginner.dict_vs_defaultdict.get_value_from_dict_with_square_brackets(my_dict, key)</code>","text":"<p>Get value from a dict using square brackets.</p> <p>Parameters:</p> Name Type Description Default <code>my_dict</code> <code>dict[str, str]</code> <p>dict to find value.</p> required <code>key</code> <code>str</code> <p>key to find in the dict.</p> required <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>value of the dict for the key provided.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If key is not in the dict.</p> Source code in <code>src/beginner/dict_vs_defaultdict/dict_vs_defaultdict.py</code> <pre><code>def get_value_from_dict_with_square_brackets(\n    my_dict: dict[str, str],\n    key: str,\n) -&gt; str:\n    \"\"\"Get value from a dict using square brackets.\n\n    Parameters:\n        my_dict (dict[str, str]): dict to find value.\n        key (str): key to find in the dict.\n\n    Returns:\n        value (str): value of the dict for the key provided.\n\n    Raises:\n        KeyError: If key is not in the dict.\n    \"\"\"\n    return my_dict[key]\n</code></pre>"},{"location":"beginner/dict_vs_defaultdict/#access-dict-by-key-with-get-method","title":"Access dict by key with get method","text":"<p>Using <code>get</code> method is another option. If key is not present in dict, None (or custom value) is returned.</p>"},{"location":"beginner/dict_vs_defaultdict/#src.beginner.dict_vs_defaultdict.get_value_from_dict_with_get","title":"<code>src.beginner.dict_vs_defaultdict.get_value_from_dict_with_get(my_dict, key, default=None)</code>","text":"<p>Get value from a dict using get method.</p> <p>Return default if key is not in the dict.</p> <p>Parameters:</p> Name Type Description Default <code>my_dict</code> <code>dict[str, str]</code> <p>dict to find value.</p> required <code>key</code> <code>str</code> <p>key to find in the dict.</p> required <code>default</code> <code>str</code> <p>default value to return if key is not in the dict.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>value</code> <code>(str, None)</code> <p>value of the dict for the key provided.</p> Source code in <code>src/beginner/dict_vs_defaultdict/dict_vs_defaultdict.py</code> <pre><code>def get_value_from_dict_with_get(\n    my_dict: dict[str, str],\n    key: str,\n    default: str = None,\n) -&gt; Optional[str]:\n    \"\"\"Get value from a dict using get method.\n\n    Return default if key is not in the dict.\n\n    Parameters:\n        my_dict (dict[str, str]): dict to find value.\n        key (str): key to find in the dict.\n        default (str): default value to return if key is not in the\n            dict.\n\n    Returns:\n        value (str, None): value of the dict for the key provided.\n    \"\"\"\n    return my_dict.get(key, default)\n</code></pre>"},{"location":"beginner/dict_vs_defaultdict/#use-defaultdict","title":"Use defaultdict","text":"<p>defaultdict enables a dict with a default value, even if requested with square brackets. When setting <code>defaultdict</code>, you can send as first argument (<code>default_factory</code>) a function that will be called when key is not present in dict . String, int, list, None... any type you want. If you don't set <code>default_factory</code>, KeyError will be raised if key is not present.</p>"},{"location":"beginner/dict_vs_defaultdict/#src.beginner.dict_vs_defaultdict.get_value_from_defaultdict","title":"<code>src.beginner.dict_vs_defaultdict.get_value_from_defaultdict(my_dict, key, default=None)</code>","text":"<p>Get value from a defaultdict using square brackets.</p> <p>If a function is send as argument to defaultdict, it will use to return as the default value.</p> <p>Parameters:</p> Name Type Description Default <code>my_dict</code> <code>dict[str, str]</code> <p>defaultdict to find value.</p> required <code>key</code> <code>str</code> <p>key to find in the defaultdict.</p> required <code>default</code> <code>str</code> <p>default value class to return if key is not in the defaultdict.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>value</code> <code>str</code> <p>value of the defaultdict for the key provided.</p> Source code in <code>src/beginner/dict_vs_defaultdict/dict_vs_defaultdict.py</code> <pre><code>def get_value_from_defaultdict(\n    my_dict: dict[str, str],\n    key: str,\n    default: str = None,\n) -&gt; str:\n    \"\"\"Get value from a defaultdict using square brackets.\n\n    If a function is send as argument to defaultdict,\n    it will use to return as the default value.\n\n    Parameters:\n        my_dict (dict[str, str]): defaultdict to find value.\n        key (str): key to find in the defaultdict.\n        default (str): default value class to return if key is not in the\n            defaultdict.\n\n    Returns:\n        value (str): value of the defaultdict for the key provided.\n    \"\"\"\n    default_dict = defaultdict(lambda: default)\n    default_dict.update(**my_dict)\n    return default_dict[key]\n</code></pre>"},{"location":"beginner/dict_vs_defaultdict/#performance-comparison","title":"Performance comparison","text":"<p>There is a great performance in using defaultdict vs get</p> <pre><code>from timeit import timeit\n\nprint(\"Get missing default dict:\", timeit(\n    stmt=\"default_dict.get('key')\",\n    setup=\"default_dict = {}\",\n    number=5000000)\n)\nGet missing default dict: 0.1267744980000316\n\nprint(\"Get missing collection default dict:\", timeit(\n    stmt=\"default_dict['key']\",\n    setup=\"from collections import defaultdict; default_dict = defaultdict(lambda: None)\",  # noqa\n    number=5000000)\n)\nGet missing collection default dict: 0.0706390929999543\n\n</code></pre>"},{"location":"intermediate/exceptions/","title":"Exceptions","text":"<p>Exceptions are a mechanism for handling errors in Python (and most programming language). When an error occurs when running your code, Python raises an exception. There are multiple types of exceptions. Each exception has a name and a message.</p> <p>If the exception is not caught, the program will terminate immediately, raising the corresponding exception.</p>"},{"location":"intermediate/exceptions/#src.intermediate.exceptions.exception_uncontrolled","title":"<code>src.intermediate.exceptions.exception_uncontrolled()</code>","text":"<p>Method that raises an exception that is not handled correctly.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>cannot sum int&amp;string types</p> Source code in <code>src/intermediate/exceptions/exceptions.py</code> <pre><code>def exception_uncontrolled() -&gt; None:\n    \"\"\"Method that raises an exception that is not handled correctly.\n\n    Raises:\n        TypeError: cannot sum int&amp;string types\n    \"\"\"\n    number = 1\n    char = \"a\"\n    number + char  # raise TypeError, cannot sum int&amp;string types\n</code></pre>"},{"location":"intermediate/exceptions/#controlling-exceptions","title":"Controlling exceptions","text":"<p>Exceptions can be caught and handled using a <code>try</code> block. You can catch the exception, do something (like logging), and continue running the program.</p> <p>You can catch the exception, logging and raise the same exception to terminate the execution.</p> <p>Similar way, ou can catch the exception, logging and raise another type of exception. You can terminate the execution of a running program by raising an exception at any time.</p> <p>With the finally block, you can run code that will always run, regardless if the code in the try block raises an exception. It will be always executed.</p>"},{"location":"intermediate/exceptions/#src.intermediate.exceptions.exception_controlled","title":"<code>src.intermediate.exceptions.exception_controlled()</code>","text":"<p>Method that control the exception, no raise.</p> Source code in <code>src/intermediate/exceptions/exceptions.py</code> <pre><code>def exception_controlled() -&gt; None:\n    \"\"\"Method that control the exception, no raise.\"\"\"\n    number = 1\n    char = \"a\"\n    try:\n        number + char  # raise TypeError, cannot sum int&amp;string types\n    except TypeError:\n        logger.warning(\"Cannot sum int + string. Continue.\")\n        pass\n</code></pre>"},{"location":"intermediate/exceptions/#src.intermediate.exceptions.exception_controlled_raise_exception","title":"<code>src.intermediate.exceptions.exception_controlled_raise_exception()</code>","text":"<p>Method that control the exception, raising the same exception.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>cannot sum int&amp;string types</p> Source code in <code>src/intermediate/exceptions/exceptions.py</code> <pre><code>def exception_controlled_raise_exception() -&gt; None:\n    \"\"\"Method that control the exception, raising the same exception.\n\n    Raises:\n        TypeError: cannot sum int&amp;string types\n    \"\"\"\n    number = 1\n    char = \"a\"\n    try:\n        number + char  # raise TypeError, cannot sum int&amp;string types\n    except TypeError as exc:\n        logger.error(\"Cannot sum int + string. Raising TypeError.\")\n        raise exc\n</code></pre>"},{"location":"intermediate/exceptions/#src.intermediate.exceptions.exception_controlled_raise_custom_exception","title":"<code>src.intermediate.exceptions.exception_controlled_raise_custom_exception()</code>","text":"<p>Method that control the exception, raising custom exception.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>cannot sum int&amp;string types</p> Source code in <code>src/intermediate/exceptions/exceptions.py</code> <pre><code>def exception_controlled_raise_custom_exception() -&gt; None:\n    \"\"\"Method that control the exception, raising custom exception.\n\n    Raises:\n        TypeError: cannot sum int&amp;string types\n    \"\"\"\n    number = 1\n    char = \"a\"\n    try:\n        number + char  # raise TypeError, cannot sum int&amp;string types\n    except TypeError as exc:\n        logger.error(\"Cannot sum int + string. Raising CustomError.\")\n        raise CustomError(\n            message=\"Controlled TypeError\",\n            exception=exc,\n        )\n</code></pre>"},{"location":"intermediate/exceptions/#src.intermediate.exceptions.exception_controlled_raise_custom_exception","title":"<code>src.intermediate.exceptions.exception_controlled_raise_custom_exception()</code>","text":"<p>Method that control the exception, raising custom exception.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>cannot sum int&amp;string types</p> Source code in <code>src/intermediate/exceptions/exceptions.py</code> <pre><code>def exception_controlled_raise_custom_exception() -&gt; None:\n    \"\"\"Method that control the exception, raising custom exception.\n\n    Raises:\n        TypeError: cannot sum int&amp;string types\n    \"\"\"\n    number = 1\n    char = \"a\"\n    try:\n        number + char  # raise TypeError, cannot sum int&amp;string types\n    except TypeError as exc:\n        logger.error(\"Cannot sum int + string. Raising CustomError.\")\n        raise CustomError(\n            message=\"Controlled TypeError\",\n            exception=exc,\n        )\n</code></pre>"},{"location":"intermediate/exceptions/#references","title":"References","text":"<ul> <li>Concrete exceptions</li> </ul>"},{"location":"intermediate/inheritance/","title":"Inheritance","text":"<p>We are going to create a simple example that uses inheritance.</p> <p>Class <code>Driver</code> is the base (abstract) class that represent a generic Driver. It will contain the one common attribute, one method concrete and one abstract.</p> <p>Concrete methods are methods that can be called from the base class, and abstract methods are methods that needs to be implemented in the subclass.</p> <p>Subclass UsaDriver represents a Driver in USA. It defines the novel years and the metric unit for the speed. Abstract method <code>speed_limit</code> is implemented.</p> <p>Subclass SpainDriver represents a Driver in Spain. It defines the novel years and the metric unit for the speed. Abstract method <code>speed_limit</code> is implemented.</p>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.Driver","title":"<code>src.intermediate.inheritance.inheritance.Driver</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ABC</code></p> <p>This is a driver, an abstract class that represents a driver.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>@dataclass\nclass Driver(ABC):\n    \"\"\"This is a driver, an abstract class that represents a driver.\"\"\"\n\n    license_valid_from: datetime.date = None\n\n    def is_novel(self) -&gt; bool:\n        \"\"\"Return whatever the driver is novel or not.\n\n        Returns:\n            is_novel: True if the driver is novel, False otherwise.\n        \"\"\"\n        novel_days: int = 365 * self.novel_years\n        novel_until: datetime.date = (\n            self.license_valid_from + datetime.timedelta(days=novel_days)\n        )\n        return (\n            novel_until\n            &gt;= datetime.datetime.now(\n                tz=datetime.timezone.utc,\n            ).date()\n        )\n\n    @abstractmethod\n    def speed_limit(self) -&gt; str:\n        \"\"\"Return the speed limit with metic unit for the driver.\n\n        It is an abstract method, must be implemented by subclasses.\n\n        Returns:\n            speed_limit: speed limit with metric unit for driver.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.Driver.is_novel","title":"<code>src.intermediate.inheritance.inheritance.Driver.is_novel()</code>","text":"<p>Return whatever the driver is novel or not.</p> <p>Returns:</p> Name Type Description <code>is_novel</code> <code>bool</code> <p>True if the driver is novel, False otherwise.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>def is_novel(self) -&gt; bool:\n    \"\"\"Return whatever the driver is novel or not.\n\n    Returns:\n        is_novel: True if the driver is novel, False otherwise.\n    \"\"\"\n    novel_days: int = 365 * self.novel_years\n    novel_until: datetime.date = (\n        self.license_valid_from + datetime.timedelta(days=novel_days)\n    )\n    return (\n        novel_until\n        &gt;= datetime.datetime.now(\n            tz=datetime.timezone.utc,\n        ).date()\n    )\n</code></pre>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.Driver.speed_limit","title":"<code>src.intermediate.inheritance.inheritance.Driver.speed_limit()</code>  <code>abstractmethod</code>","text":"<p>Return the speed limit with metic unit for the driver.</p> <p>It is an abstract method, must be implemented by subclasses.</p> <p>Returns:</p> Name Type Description <code>speed_limit</code> <code>str</code> <p>speed limit with metric unit for driver.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>@abstractmethod\ndef speed_limit(self) -&gt; str:\n    \"\"\"Return the speed limit with metic unit for the driver.\n\n    It is an abstract method, must be implemented by subclasses.\n\n    Returns:\n        speed_limit: speed limit with metric unit for driver.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.UsaDriver","title":"<code>src.intermediate.inheritance.inheritance.UsaDriver</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Driver</code></p> <p>Concrete class of a Driver that can drive in USA.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>@dataclass\nclass UsaDriver(Driver):\n    \"\"\"Concrete class of a Driver that can drive in USA.\"\"\"\n\n    novel_years = 2\n    metric_unit = \"mph\"\n\n    def speed_limit(self) -&gt; str:\n        \"\"\"Return the speed limit with metic unit for the driver.\n\n        Returns:\n            speed_limit: speed limit with metric unit for driver.\n        \"\"\"\n        return f\"70{self.metric_unit}\"\n</code></pre>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.UsaDriver.speed_limit","title":"<code>src.intermediate.inheritance.inheritance.UsaDriver.speed_limit()</code>","text":"<p>Return the speed limit with metic unit for the driver.</p> <p>Returns:</p> Name Type Description <code>speed_limit</code> <code>str</code> <p>speed limit with metric unit for driver.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>def speed_limit(self) -&gt; str:\n    \"\"\"Return the speed limit with metic unit for the driver.\n\n    Returns:\n        speed_limit: speed limit with metric unit for driver.\n    \"\"\"\n    return f\"70{self.metric_unit}\"\n</code></pre>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.SpainDriver","title":"<code>src.intermediate.inheritance.inheritance.SpainDriver</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Driver</code></p> <p>Concrete class of a Driver that can drive in Spain.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>@dataclass\nclass SpainDriver(Driver):\n    \"\"\"Concrete class of a Driver that can drive in Spain.\"\"\"\n\n    novel_years = 1\n    metric_unit = \"km/h\"\n\n    def speed_limit(self) -&gt; str:\n        \"\"\"Return the speed limit with metic unit for the driver.\n\n        Returns:\n            speed_limit: speed limit with metric unit for driver.\n        \"\"\"\n        if self.is_novel():\n            return f\"100{self.metric_unit}\"\n        return f\"120{self.metric_unit}\"\n</code></pre>"},{"location":"intermediate/inheritance/#src.intermediate.inheritance.inheritance.SpainDriver.speed_limit","title":"<code>src.intermediate.inheritance.inheritance.SpainDriver.speed_limit()</code>","text":"<p>Return the speed limit with metic unit for the driver.</p> <p>Returns:</p> Name Type Description <code>speed_limit</code> <code>str</code> <p>speed limit with metric unit for driver.</p> Source code in <code>src/intermediate/inheritance/inheritance.py</code> <pre><code>def speed_limit(self) -&gt; str:\n    \"\"\"Return the speed limit with metic unit for the driver.\n\n    Returns:\n        speed_limit: speed limit with metric unit for driver.\n    \"\"\"\n    if self.is_novel():\n        return f\"100{self.metric_unit}\"\n    return f\"120{self.metric_unit}\"\n</code></pre>"},{"location":"intermediate/logging/","title":"Logging","text":"<p>Logging is a very important part of any application. It allows you to track the code execution and to debug the application. Python has a built-in logging module that allows you to log messages to the console, to a file, or to a remote server. In contrast to the <code>print</code> function, the logging module is more complete, allowing you to configure the log level, the log format, and the log destination.</p> <p>Logging is based in handlers. A handler is an object that receives the log messages and decides what to do with them. The logging module has several built-in handlers, such as <code>StreamHandler</code>, <code>FileHandler</code>, <code>RotatingFileHandler</code> or <code>TimedRotatingFileHandler</code>. But you can create your own handler by inherit the <code>Handler</code> class. Notifiers is a 3pp library that provides with extra handlers with the ability to send notifications to different services.</p>"},{"location":"intermediate/logging/#best-practices","title":"Best practices","text":"<ul> <li>Set different log levels for different environments. For example, you may set   <code>DEBUG</code> level in development and <code>ERROR</code> level in production.</li> <li>Set a specific format for the log messages, including the timestamp or the log   level. Using a standard format makes it easier to read the log messages. Use   the <code>extra</code> parameter to pass the data to the log message.</li> <li>Use pipelines <code>|</code> to separate the different parts of the log message. It can be   useful to filter the log messages, or even to parse them.</li> <li>To include variables in your log message, don't use <code>format</code> or <code>f-string</code> in   the log call, instead use the <code>%s</code>, like <code>logger.info('Variable: %s', value)</code>.</li> <li>Use <code>logging.exception</code> to log an exception message and the stack trace.</li> <li>Set the different logger instance you are going to use with   <code>logging.getLogger</code>. This way you can configure the logger in one place and   use it in different modules.</li> </ul>"},{"location":"intermediate/logging/#logging-library","title":"logging library","text":"<p>This is the built-in Python logging library. It is very flexible and allows you to configure the log level, the log format, and the log destination.</p> <p>Each logger has a name, and the loggers are organized in a tree-like structure. The root logger is the top-level logger, and all other loggers are children of the root logger.</p>"},{"location":"intermediate/logging/#src.intermediate.logging.default_logging","title":"<code>src.intermediate.logging.default_logging(level)</code>","text":"<p>Method to show default logging configuration.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>level to set in logging</p> required Source code in <code>src/intermediate/logging/logging.py</code> <pre><code>def default_logging(level: int):\n    \"\"\"Method to show default logging configuration.\n\n    Args:\n        level (int): level to set in logging\n    \"\"\"\n    if level not in logging._levelToName:\n        raise IndexError(\"Invalid level to set logging.\")\n\n    logging.debug(\"DEBUG logging\")\n    logging.info(\"INFO logging\")\n    logging.warning(\"WARNING logging\")\n    logging.error(\"ERROR logging\")\n    logging.critical(\"CRITICAL logging\")\n</code></pre>"},{"location":"intermediate/logging/#src.intermediate.logging.custom_logging_format","title":"<code>src.intermediate.logging.custom_logging_format(format, datefmt)</code>","text":"<p>Method to show logging configuration format.</p> <p>Other arguments worthy to mention are: filename: using the path as log file with FileHandler. filemode: specifies the mode to open the log file.</p> Source code in <code>src/intermediate/logging/logging.py</code> <pre><code>def custom_logging_format(format: str, datefmt: str):\n    \"\"\"Method to show logging configuration format.\n\n    Other arguments worthy to mention are:\n    filename: using the path as log file with FileHandler.\n    filemode: specifies the mode to open the log file.\n    \"\"\"\n    logging.basicConfig(\n        level=logging.INFO,\n        format=format,\n        datefmt=datefmt,\n    )\n    logger = logging.getLogger(__name__)\n\n    logger.info(\"INFO logging formatted\")\n</code></pre>"},{"location":"intermediate/logging/#loguru-library","title":"loguru library","text":"<p>Loguru is a third-party library that simplifies the logging configuration to the bare minimum, such as log level and log format. But you can also can configure much more easily, such as:</p> <ul> <li>color customization.</li> <li>log rotation, retention and compression.</li> <li>custom log levels.</li> <li>lazy evaluation of log messages.</li> </ul>"},{"location":"intermediate/logging/#src.intermediate.logging.default_loguru","title":"<code>src.intermediate.logging.default_loguru()</code>","text":"<p>Method to show default loguru configuration.</p> Source code in <code>src/intermediate/logging/logging.py</code> <pre><code>def default_loguru():\n    \"\"\"Method to show default loguru configuration.\"\"\"\n    logger_loguru.debug(\"DEBUG loguru\")\n    logger_loguru.info(\"INFO loguru\")\n    logger_loguru.warning(\"WARNING loguru\")\n    logger_loguru.error(\"ERROR loguru\")\n    logger_loguru.critical(\"CRITICAL loguru\")\n</code></pre>"},{"location":"intermediate/logging/#src.intermediate.logging.custom_loguru_format_and_level","title":"<code>src.intermediate.logging.custom_loguru_format_and_level(format, level)</code>","text":"<p>Method to show loguru custom configuration.</p> <p>Add custom configuration to loguru, such as format and level. Sink is the first argument, representing how/where to log. It can be sys.*, or a log file path or a loggingHandler.</p> <p>More information in the official loguru documentation: https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.add</p> Source code in <code>src/intermediate/logging/logging.py</code> <pre><code>def custom_loguru_format_and_level(format: str, level: str):\n    \"\"\"Method to show loguru custom configuration.\n\n    Add custom configuration to loguru, such as format and level.\n    Sink is the first argument, representing how/where to log.\n    It can be sys.*, or a log file path or a loggingHandler.\n\n    More information in the official loguru documentation:\n    https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.add\n    \"\"\"\n    logger_loguru.add(sys.stdout, format=format, level=level)\n\n    logger_loguru.debug(\"DEBUG loguru formatted\")\n    logger_loguru.info(\"INFO loguru formatted\")\n    logger_loguru.warning(\"WARNING loguru formatted\")\n    logger_loguru.error(\"ERROR loguru formatted\")\n    logger_loguru.critical(\"CRITICAL loguru formatted\")\n</code></pre>"},{"location":"intermediate/logging/#references","title":"References","text":"<ul> <li>Python logging module</li> <li>Loguru repository</li> </ul>"},{"location":"intermediate/yield_vs_return/","title":"Yield vs return","text":""},{"location":"intermediate/yield_vs_return/#return","title":"Return","text":"<p><code>return</code> keyword implies the output of a function. It stops the function after running.</p>"},{"location":"intermediate/yield_vs_return/#src.intermediate.yield_vs_return.return_even_numbers","title":"<code>src.intermediate.yield_vs_return.return_even_numbers(n)</code>","text":"<p>Return even numbers until n (inclusive).</p> <p>Returns:</p> Name Type Description <code>even_numbers</code> <code>list[int]</code> <p>List of even numbers until n (inclusive).</p> Source code in <code>src/intermediate/yield_vs_return/yield_vs_return.py</code> <pre><code>def return_even_numbers(n: int) -&gt; list[int]:\n    \"\"\"Return even numbers until n (inclusive).\n\n    Returns:\n        even_numbers: List of even numbers until n (inclusive).\n    \"\"\"\n    numbers: list[int] = []\n    for number in range(1, n):\n        if number % 2 == 0:\n            numbers.append(number)\n    return numbers\n</code></pre>"},{"location":"intermediate/yield_vs_return/#yield","title":"Yield","text":"<p><code>yield</code> keyword also returns a value, but a function can yield multiple outputs, so it does not stop the entire function. Yield returns a generator object, which is an iterator. It can be used in loops.</p> <p>You can use yield instead of return when the data size is large, as it doesn't store in memory the entire result, only when function is called. It is an efficient way of producing data that is big or infinite.</p>"},{"location":"intermediate/yield_vs_return/#src.intermediate.yield_vs_return.yield_even_numbers","title":"<code>src.intermediate.yield_vs_return.yield_even_numbers(n)</code>","text":"<p>Yield even numbers until n (inclusive).</p> <p>Returns:</p> Name Type Description <code>even_numbers</code> <code>Generator</code> <p>List of even numbers until n (inclusive).</p> Source code in <code>src/intermediate/yield_vs_return/yield_vs_return.py</code> <pre><code>def yield_even_numbers(n: int) -&gt; Generator:\n    \"\"\"Yield even numbers until n (inclusive).\n\n    Returns:\n        even_numbers: List of even numbers until n (inclusive).\n    \"\"\"\n    for number in range(1, n):\n        if number % 2 == 0:\n            yield number\n</code></pre>"},{"location":"intermediate/yield_vs_return/#src.intermediate.yield_vs_return.yield_fibonacci_numbers","title":"<code>src.intermediate.yield_vs_return.yield_fibonacci_numbers()</code>","text":"<p>Yield Fibonacci series.</p> <p>Returns:</p> Name Type Description <code>fibonacci_numbers</code> <code>Generator</code> <p>List of numbers of the Fibonacci series.</p> Source code in <code>src/intermediate/yield_vs_return/yield_vs_return.py</code> <pre><code>def yield_fibonacci_numbers() -&gt; Generator:\n    \"\"\"Yield Fibonacci series.\n\n    Returns:\n        fibonacci_numbers: List of numbers of the Fibonacci series.\n    \"\"\"\n    c1, c2 = 0, 1\n    count = 0\n    while True:\n        yield c1\n        c3 = c1 + c2\n        c1 = c2\n        c2 = c3\n        count += 1\n</code></pre>"}]}